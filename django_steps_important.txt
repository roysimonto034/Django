Git steps for cretaing a folder :
---------------------------------
go to github ui create a repository like mygitcode

go cmd
create a folder mytest
type git init
type git clone 'git@github.com:roysimonto034/mygitcode.git'
cd mygitcode
git pull origin master
touch  file.txt ,put content
add file.txt
commit file.txt
git push origin master

Django
-----------------------------
startproject
startapp
templates--->testapp-->html files
static-->css-->demo.css
static--->images--->*jpg
settings.py
	add application
	add template folder path
	add statci folder path
models.py
     class Emplo(models.Models):
	       field declarations
makemigrations
migrate
register this model to the admin inside admin.py
create superuser
check in the admin interface whether out tables are reflecting or not
populate our tables with required records
     faker modules
views.py
-----------------------------------------------------------------------
MVT (model view template)
model 

API:Application programming interface
ex:1.suppose we have mobile phone to use phone we use keypad which is a interface
   2.Atm we have gui screens and button.to withraw or check balance we use buttons these are interface
similarly one application communicates another application using interface whcih known as API
for   mobile we use gui but for applications we use API
by using java application can communinate with django application to use its services 
similary mobile applicationcan communicates with  django application to use its services 
the Api's which are developed for sevices (of an application )to be used by end users over the web or using http protocol known as WEBAPI or WEBSERVCIES
api developed for web applications so that partner application can use its services are known as webapi or webservice
bookmyshow interacts with payment applications for payments using webservices
facebook which communicates with gmail using api's 
for standalone applications need gui

we will develop api for django applications whcih is a web application known as django rest api's

rest:representational state transfer 
Rest is an architecture
1.It defines several guidelines to develop web api very easily
The Api's which are developed using Rest known as Restful API,Restful Webservices
Rest Framewok provide tools to develop rest api easily
----------------------------------------------------------------


------------------------------------------------------------------------------views.py------------from django.shortcuts import render
from django.http import HttpResponse
from django.views.generic import View
from django.http import HttpResponse, JsonResponse
from django.core.serializers import serialize
from mynewapp.mixin import *
import json
from . models import *

# Create your views here.
def mymethod(request):
 return HttpResponse('<h1>hello Django we are here</h1>')

def rendermethod(request):
 return render(request,'mynewapp/index.html',context={'name':'Wiprorites'})


class EmployeeCSV(View):
 def get(self,request,ids=151):
 try:
 empdata=Employee.objects.get(id=ids)
 except Employee.DoesNotExist:
 mydata={'error':'No data found'}
 #jsondata = json.dumps(mydata)
 #return HttpResponse(jsondata, content_type='application/json',status=404)
 return JsonResponse(mydata,status=404)
 else:
 jsondata = serialize('json', [empdata, ])
 return HttpResponse(jsondata,content_type='application/json',status=200)
#jsondata=serialize('json',[empdata,],fields=['empid','empname'])


class EmployeeBld(Employeemixin,View):
 def get(self,request):
 data=Employee.objects.all()
 return self.gernerate_reponse(data)

class SelectedView(Employeemixin,View):
 def get(self,request):
 epdata=Employee.objects.all()
 return self.modiresponse(epdata)-------------mixin.pyimport json
from django.http import HttpResponse, JsonResponse
from django.core.serializers import serialize
from mynewapp.models import *


class Employeemixin(object):

 def gernerate_reponse(self, jsondata):
 jsdata = serialize('json', jsondata)
 return HttpResponse(jsdata,content_type='application/json')

 def modiresponse(self,jsondata):
 jsdata=serialize('json',jsondata)
 pdata=json.loads(jsdata)
 pflist=[]
 for eip in pdata:
 pflist.append(eip.get('fields'))
 jsond=json.dumps(pflist)
 return HttpResponse(jsond,content_type='application/json',status=200)
---------------------------testapi.pyimport requests

Base_url='http://localhost:8000'
endurl='/mynewproj/apiview/'
endurl2='/mynewproj/restapp/'

def show_all():
 resp= requests.get(Base_url+endurl)
 print(resp.status_code)
 print(resp.json())

def show_one():
 resp = requests.get(Base_url + endurl2)
 print(resp.status_code)
 print(resp.json())

show_one()
----------------------------urls.pyfrom django.urls import path
from . import views
urlpatterns = [
 path('finalapp/',views.mymethod,name='mymethod'),
 path('',views.rendermethod,name='rendermethod'),
 #path('restapp/(?P<id>\d+)/$',views.EmployeeCSV.as_view()),
 path('restapp/',views.EmployeeCSV.as_view()),
 path('api/',views.EmployeeBld.as_view()),
 path('apiview/',views.SelectedView.as_view()),
]



The process of converting Python object to json is serializationx
two ways: 1.json.dumps
          2. using django serializer 
          3.By using rest framework serializers
[ 

Thats All as of now
